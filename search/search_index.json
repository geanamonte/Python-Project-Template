{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastVector","text":"<p>This is a simple vector python package.</p>"},{"location":"api/","title":"References","text":""},{"location":"api/#vector-class","title":"Vector Class","text":""},{"location":"api/#fastvector.vector.VectorND","title":"<code>VectorND</code>","text":"Source code in <code>fastvector/vector.py</code> <pre><code>@total_ordering\nclass VectorND:\n    def __init__(self, *args: Any, dtype: Dtype = float64) -&gt; None:\n\"\"\"Create a vector with the given values.\n\n        Args:\n            args (Any): The vector values.\n            dtype (Dtype): The data type of the array.array.\n\n        Raises:\n            TypeError: If x or y are not a number.\n        \"\"\"\n        if len(args) == 1 and isinstance(args[0], list):\n            self.values = array.array(dtype, args[0])\n        elif len(args) &gt; 1:\n            inputs = [val for val in args]\n            self.values = array.array(dtype, inputs)\n        else:\n            raise TypeError('You must pass in int/float value for x and y!')\n\n    def __repr__(self) -&gt; str:\n\"\"\"Return the vector representation.\n\n        Returns:\n            The representation of the vector.\n        \"\"\"\n        return f'vector.VectorND({self.values})'\n\n    def __str__(self) -&gt; str:\n\"\"\"The vector as a string.\n\n        Returns:\n            The vector as a string.\n        \"\"\"\n        return f'({self.values})'\n\n    def __abs__(self) -&gt; float:\n\"\"\"Return the length (magnitude) of the vector.\n\n        Returns:\n            Length of the vector.\n        \"\"\"\n        return sqrt(sum(pow(val, 2) for val in self.values))\n\n    def __eq__(self, other_vector: object) -&gt; bool:\n\"\"\"Check if the vectors have the same values.\n\n        Args:\n            other_vector: Other vector (rhs)\n\n        Returns:\n            True, if the both vectors have the same values.\n            False, else.\n        \"\"\"\n        if not isinstance(other_vector, VectorND):\n            return False\n        return self.values == other_vector.values\n\n    def __lt__(self, other_vector: VectorND) -&gt; bool:\n\"\"\"Check if the self is less than the other vector.\n\n        Args:\n            other_vector: Other vector (rhs).\n\n        Returns:\n            True, if the self is less than the other vector.\n            False, else.\n        \"\"\"\n        if not isinstance(other_vector, VectorND):\n            raise TypeError('You must pass in a VectorND instance!')\n        return abs(self) &lt; abs(other_vector)\n\n    def __add__(self, other_vector: VectorND) -&gt; VectorND:\n\"\"\"Returns the additon vector of the self and the other vector.\n\n        Args:\n            other_vector: Other vector (rhs).\n\n        Returns:\n            The additon vector of the self and the other vector.\n        \"\"\"\n        if not isinstance(other_vector, VectorND):\n            raise TypeError('You must pass in a VectorND instance!')\n        result = [v1 + v2 for v1, v2 in zip(self.values, other_vector.values)]\n        return VectorND(result)\n\n    def __sub__(self, other_vector: VectorND) -&gt; VectorND:\n\"\"\"Return the subtraction vector of the self and the other vector.\n\n        Args:\n            other_vector: Other vector (rhs).\n\n        Returns:\n            The subtraction vector of the self and the other vector.\n        \"\"\"\n        if not isinstance(other_vector, VectorND):\n            raise TypeError('You must pass in a VectorND instance!')\n        result = [v1 - v2 for v1, v2 in zip(self.values, other_vector.values)]\n        return VectorND(result)\n\n    def __mul__(\n        self, other: Union[VectorND, Number]\n    ) -&gt; Union[VectorND, Number]:\n\"\"\"Return the multiplication of self and the other vector/number.\n\n        Args:\n            other: Other vector or scaler value (rhs)\n\n        Raises:\n            TypeError: Not int/float passed in.\n\n        Returns:\n            The multiplication of self and the other vector/number.\n        \"\"\"\n        if isinstance(other, VectorND):\n            return sum([v1 * v2 for v1, v2 in zip(self.values, other.values)])\n        if not isinstance(other, int) and not isinstance(other, float):\n            raise TypeError('You must pass in an int/float!')\n        return VectorND([v * other for v in self.values])\n\n    def __truediv__(self, other: Number) -&gt; VectorND:\n\"\"\"Return the multiplication of self and the other vector/number.\n\n        Args:\n            other: Other vector or scaler value (rhs).\n\n        Raises:\n            ValueError: Division by zero.\n            TypeError: Not int/float passed in.\n\n        Returns:\n            The multiplication of self and the other vector/number.\n        \"\"\"\n        if not isinstance(other, int) and not isinstance(other, float):\n            raise TypeError('You must pass in an int/float!')\n        return VectorND([v / other for v in self.values])\n\n    def __len__(self) -&gt; int:\n\"\"\"Returns the length of the vector.\n\n        Returns:\n            int: The length.\n        \"\"\"\n        return len(self.values)\n\n    def __getitem__(self, idx: int) -&gt; Number:\n\"\"\"Returns the i-th component of the vector.\n\n        Args:\n            idx (int): i-th component index\n\n        Returns:\n            Number: The value at the i-th component\n        \"\"\"\n        result: Number = self.values[idx]\n        return result\n\n    def __setitem__(self, idx: int, val: Number) -&gt; None:\n\"\"\"Updates the i-th component of the vector.\n\n        Args:\n            idx (int): i-th component index\n            val (Number): The updated valued\n        \"\"\"\n        self.values[idx] = val\n</code></pre>"},{"location":"api/#fastvector.vector.VectorND.__abs__","title":"<code>__abs__()</code>","text":"<p>Return the length (magnitude) of the vector.</p> <p>Returns:</p> Type Description <code>float</code> <p>Length of the vector.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __abs__(self) -&gt; float:\n\"\"\"Return the length (magnitude) of the vector.\n\n    Returns:\n        Length of the vector.\n    \"\"\"\n    return sqrt(sum(pow(val, 2) for val in self.values))\n</code></pre>"},{"location":"api/#fastvector.vector.VectorND.__add__","title":"<code>__add__(other_vector)</code>","text":"<p>Returns the additon vector of the self and the other vector.</p> <p>Parameters:</p> Name Type Description Default <code>other_vector</code> <code>VectorND</code> <p>Other vector (rhs).</p> required <p>Returns:</p> Type Description <code>VectorND</code> <p>The additon vector of the self and the other vector.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __add__(self, other_vector: VectorND) -&gt; VectorND:\n\"\"\"Returns the additon vector of the self and the other vector.\n\n    Args:\n        other_vector: Other vector (rhs).\n\n    Returns:\n        The additon vector of the self and the other vector.\n    \"\"\"\n    if not isinstance(other_vector, VectorND):\n        raise TypeError('You must pass in a VectorND instance!')\n    result = [v1 + v2 for v1, v2 in zip(self.values, other_vector.values)]\n    return VectorND(result)\n</code></pre>"},{"location":"api/#fastvector.vector.VectorND.__eq__","title":"<code>__eq__(other_vector)</code>","text":"<p>Check if the vectors have the same values.</p> <p>Parameters:</p> Name Type Description Default <code>other_vector</code> <code>object</code> <p>Other vector (rhs)</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True, if the both vectors have the same values.</p> <code>bool</code> <p>False, else.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __eq__(self, other_vector: object) -&gt; bool:\n\"\"\"Check if the vectors have the same values.\n\n    Args:\n        other_vector: Other vector (rhs)\n\n    Returns:\n        True, if the both vectors have the same values.\n        False, else.\n    \"\"\"\n    if not isinstance(other_vector, VectorND):\n        return False\n    return self.values == other_vector.values\n</code></pre>"},{"location":"api/#fastvector.vector.VectorND.__getitem__","title":"<code>__getitem__(idx)</code>","text":"<p>Returns the i-th component of the vector.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>i-th component index</p> required <p>Returns:</p> Name Type Description <code>Number</code> <code>Number</code> <p>The value at the i-th component</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __getitem__(self, idx: int) -&gt; Number:\n\"\"\"Returns the i-th component of the vector.\n\n    Args:\n        idx (int): i-th component index\n\n    Returns:\n        Number: The value at the i-th component\n    \"\"\"\n    result: Number = self.values[idx]\n    return result\n</code></pre>"},{"location":"api/#fastvector.vector.VectorND.__init__","title":"<code>__init__(*args, dtype=float64)</code>","text":"<p>Create a vector with the given values.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Any</code> <p>The vector values.</p> <code>()</code> <code>dtype</code> <code>Dtype</code> <p>The data type of the array.array.</p> <code>float64</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If x or y are not a number.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __init__(self, *args: Any, dtype: Dtype = float64) -&gt; None:\n\"\"\"Create a vector with the given values.\n\n    Args:\n        args (Any): The vector values.\n        dtype (Dtype): The data type of the array.array.\n\n    Raises:\n        TypeError: If x or y are not a number.\n    \"\"\"\n    if len(args) == 1 and isinstance(args[0], list):\n        self.values = array.array(dtype, args[0])\n    elif len(args) &gt; 1:\n        inputs = [val for val in args]\n        self.values = array.array(dtype, inputs)\n    else:\n        raise TypeError('You must pass in int/float value for x and y!')\n</code></pre>"},{"location":"api/#fastvector.vector.VectorND.__len__","title":"<code>__len__()</code>","text":"<p>Returns the length of the vector.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The length.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __len__(self) -&gt; int:\n\"\"\"Returns the length of the vector.\n\n    Returns:\n        int: The length.\n    \"\"\"\n    return len(self.values)\n</code></pre>"},{"location":"api/#fastvector.vector.VectorND.__lt__","title":"<code>__lt__(other_vector)</code>","text":"<p>Check if the self is less than the other vector.</p> <p>Parameters:</p> Name Type Description Default <code>other_vector</code> <code>VectorND</code> <p>Other vector (rhs).</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True, if the self is less than the other vector.</p> <code>bool</code> <p>False, else.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __lt__(self, other_vector: VectorND) -&gt; bool:\n\"\"\"Check if the self is less than the other vector.\n\n    Args:\n        other_vector: Other vector (rhs).\n\n    Returns:\n        True, if the self is less than the other vector.\n        False, else.\n    \"\"\"\n    if not isinstance(other_vector, VectorND):\n        raise TypeError('You must pass in a VectorND instance!')\n    return abs(self) &lt; abs(other_vector)\n</code></pre>"},{"location":"api/#fastvector.vector.VectorND.__mul__","title":"<code>__mul__(other)</code>","text":"<p>Return the multiplication of self and the other vector/number.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Union[VectorND, Number]</code> <p>Other vector or scaler value (rhs)</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>Not int/float passed in.</p> <p>Returns:</p> Type Description <code>Union[VectorND, Number]</code> <p>The multiplication of self and the other vector/number.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __mul__(\n    self, other: Union[VectorND, Number]\n) -&gt; Union[VectorND, Number]:\n\"\"\"Return the multiplication of self and the other vector/number.\n\n    Args:\n        other: Other vector or scaler value (rhs)\n\n    Raises:\n        TypeError: Not int/float passed in.\n\n    Returns:\n        The multiplication of self and the other vector/number.\n    \"\"\"\n    if isinstance(other, VectorND):\n        return sum([v1 * v2 for v1, v2 in zip(self.values, other.values)])\n    if not isinstance(other, int) and not isinstance(other, float):\n        raise TypeError('You must pass in an int/float!')\n    return VectorND([v * other for v in self.values])\n</code></pre>"},{"location":"api/#fastvector.vector.VectorND.__repr__","title":"<code>__repr__()</code>","text":"<p>Return the vector representation.</p> <p>Returns:</p> Type Description <code>str</code> <p>The representation of the vector.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"Return the vector representation.\n\n    Returns:\n        The representation of the vector.\n    \"\"\"\n    return f'vector.VectorND({self.values})'\n</code></pre>"},{"location":"api/#fastvector.vector.VectorND.__setitem__","title":"<code>__setitem__(idx, val)</code>","text":"<p>Updates the i-th component of the vector.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>i-th component index</p> required <code>val</code> <code>Number</code> <p>The updated valued</p> required Source code in <code>fastvector/vector.py</code> <pre><code>def __setitem__(self, idx: int, val: Number) -&gt; None:\n\"\"\"Updates the i-th component of the vector.\n\n    Args:\n        idx (int): i-th component index\n        val (Number): The updated valued\n    \"\"\"\n    self.values[idx] = val\n</code></pre>"},{"location":"api/#fastvector.vector.VectorND.__str__","title":"<code>__str__()</code>","text":"<p>The vector as a string.</p> <p>Returns:</p> Type Description <code>str</code> <p>The vector as a string.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"The vector as a string.\n\n    Returns:\n        The vector as a string.\n    \"\"\"\n    return f'({self.values})'\n</code></pre>"},{"location":"api/#fastvector.vector.VectorND.__sub__","title":"<code>__sub__(other_vector)</code>","text":"<p>Return the subtraction vector of the self and the other vector.</p> <p>Parameters:</p> Name Type Description Default <code>other_vector</code> <code>VectorND</code> <p>Other vector (rhs).</p> required <p>Returns:</p> Type Description <code>VectorND</code> <p>The subtraction vector of the self and the other vector.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __sub__(self, other_vector: VectorND) -&gt; VectorND:\n\"\"\"Return the subtraction vector of the self and the other vector.\n\n    Args:\n        other_vector: Other vector (rhs).\n\n    Returns:\n        The subtraction vector of the self and the other vector.\n    \"\"\"\n    if not isinstance(other_vector, VectorND):\n        raise TypeError('You must pass in a VectorND instance!')\n    result = [v1 - v2 for v1, v2 in zip(self.values, other_vector.values)]\n    return VectorND(result)\n</code></pre>"},{"location":"api/#fastvector.vector.VectorND.__truediv__","title":"<code>__truediv__(other)</code>","text":"<p>Return the multiplication of self and the other vector/number.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Number</code> <p>Other vector or scaler value (rhs).</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>Division by zero.</p> <code>TypeError</code> <p>Not int/float passed in.</p> <p>Returns:</p> Type Description <code>VectorND</code> <p>The multiplication of self and the other vector/number.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __truediv__(self, other: Number) -&gt; VectorND:\n\"\"\"Return the multiplication of self and the other vector/number.\n\n    Args:\n        other: Other vector or scaler value (rhs).\n\n    Raises:\n        ValueError: Division by zero.\n        TypeError: Not int/float passed in.\n\n    Returns:\n        The multiplication of self and the other vector/number.\n    \"\"\"\n    if not isinstance(other, int) and not isinstance(other, float):\n        raise TypeError('You must pass in an int/float!')\n    return VectorND([v / other for v in self.values])\n</code></pre>"}]}